package ex.ample {	import assets.loading.LoadingTimelineTxt;
	import mvc.core.Preloader;	import flash.events.ProgressEvent;	/**	 * Dragon	 * ex.ample.FlashPreloader	 */ 	public class FlashPreloader extends Preloader {		/**		 * Constructor		 */		public function FlashPreloader() {			trace("+ Dragon + FlashPreloader.FlashPreloader() - args: " + [  ]);						// load with a timeline animation			super(new LoadingTimelineTxt());		}				/**		 * use a different way to process the progress		 */		override protected function onProgressHandler(event : ProgressEvent = null) : void {			// fill the progress bar based on how many of our bytes have been loaded//			var pct : Number = (event == null) ? .5 : event.bytesLoaded / event.bytesTotal;//			var frame : int = Math.ceil(_progressBar.totalFrames * pct);//			//			_progressBar.tLoadingPct.tTxt.text = Math.ceil(pct*100) + '%';//			_progressBar.gotoAndStop(frame);		}				/**		 * Because the LoadingTimeline() movieclip has the registration point in the center		 * the centerProgressBar needs to use this centerpoint...		 */		override protected function centerProgressBar() : void {			// position of the progressBar			//			_progressBar.x = Math.round((stage.stageWidth) / 2);//			_progressBar.y = Math.round((stage.stageHeight) / 2);		}	}}