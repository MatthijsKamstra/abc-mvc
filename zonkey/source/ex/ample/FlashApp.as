package ex.ample {	import ex.ample.views.AlfaView;	import ex.ample.views.BetaView;	import ex.ample.views.DeltaView;	import ex.ample.views.EpsilonView;	import ex.ample.views.GammaView;	import mvc.core.Application;	import mvc.core.Model;	import mvc.core.NavView;	import nl.noiselibrary.utils.AlignUtil;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Rectangle;	/**	 * Dragon	 * ex.ample.FlashApp	 */	public class FlashApp extends Application {				// ApplicationData		private static const APP_WIDTH : Number = 900;
		private static const APP_HEIGHT : Number = 600;
		// put all views in the wrapper		private var wrapper : Sprite;		/**		 * Constructor		 */		public function FlashApp(  ) {			trace("+ Zonkey + FlashApp.FlashApp() - args: " + [  ]);			/*			 * Application will start:			 * 			 * setupStage();			 * setupDomainAccess();			 * setupContextMenu();			 * setupConfig();			 * setupApplication();			 * init();			 */ 		}		/**		 * create layers		 */		override protected function setupApplication() : void {			// Setup layers for bg/main/views/popups			wrapper = new Sprite();						// shortest way of setting views			// first view initiated will be the default view (activated by Model.getInstance().showDefaultView())			wrapper.addChild(new AlfaView());			wrapper.addChild(new BetaView());			wrapper.addChild(new GammaView());			wrapper.addChild(new DeltaView());			wrapper.addChild(new EpsilonView());			// place navigation on top, so add last			if (!Application.IS_ONLINE) wrapper.addChild(new NavView());						// wrap it			addChild(wrapper);						// show first/default view			Model.getInstance().showDefaultView();						// listen to browser resize			stage.addEventListener(Event.RESIZE, resizeHandler);						// place everything 			resizeHandler(null);		}		/**		 * init data		 */		override protected function init() : void {			model.data = new XML();		}		//////////////////////////////////////// resize-handler ////////////////////////////////////////		private function resizeHandler(e : Event) : void {			new AlignUtil(wrapper, AlignUtil.CENTER_TOP, new Rectangle(0, 0, APP_WIDTH, APP_HEIGHT), true);		}	}}