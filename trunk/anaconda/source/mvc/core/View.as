package mvc.core {	import mvc.utils.ClassUtil;	import flash.display.MovieClip;	import flash.events.Event;	import flash.utils.setTimeout;	public class View extends MovieClip {		private var _model : Model;		private var _controller : Controller = null;		private var _viewName : String;
		/**		 * constructor		 * 		 * @param inController	specific controller use for this view (default: null)		 */		public function View( inController : Controller = null ) {			// Save properties.			_model = Model.getInstance();						// If we have a controller set one.			if( _controller != null ) _controller = inController;						// get viewname (classname)			_viewName = ClassUtil.typeOf(this);						// auto add the view to the Model			_model.viewNameArray = _viewName;						// Register events.			registerEvents();						// hide			visible = false;		}		/**		 * automaticly the view is added to the model.		 * If that is not wise (for example with navigation)		 * you should use this function to remove it from the model-list		 */		public function removeFromModel() : void {			_model.removeViewNameFromArray();					}		//		public function defaultController() : Controller {		//			return null;		//		}		public function registerEvents() : void {			// Abstract.			model.addEventListener(_viewName, show);			model.addEventListener(( _viewName + Model.CLEAR ), hide);		}		/**		 * show this view		 * default: visibility = true		 */		public function show( event : Event ) : void {			// override this function to use your custom show (tweens/animations)			// override public function show( event : Event ) : void {}			visible = true;		}		/**		 * hide this view		 * default: visibility = false		 */		public function hide( event : Event ) : void {			// override this function to use your custom hide (tweens/animations)			// override public function hide( event : Event ) : void {}			visible = false;			destroy();		}		public function destroy() : void {			setTimeout(nextEvent, 50);		}		private function nextEvent() : void {			_model.sendInternalEvent(_model.currentEvent);		}		//////////////////////////////////////// getter setter ////////////////////////////////////////			public function set model( inModel : Model ) : void {			_model = inModel;		}		public function get model() : Model {			return _model;		}		public function set controller( inController : Controller ) : void {			_controller = inController;		}		public function get controller() : Controller {			return _controller;		}	}}