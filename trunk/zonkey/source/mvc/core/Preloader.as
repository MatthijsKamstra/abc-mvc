/** * This code is part of the Bumpslide Library by David Knape * http://bumpslide.com/ *  * with some adjustments from Matthijs Kamstra aka [mck] *  *  */ package mvc.core {	import flash.display.Graphics;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.events.Event;	import flash.events.ProgressEvent;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.utils.Timer;	/**	 * This is the document class for the preloader wrapper swf.	 * 	 * To use, embed your swf as preloader.swf?swf=mainfile.swf	 * 	 * url options:	 * 	 * swf (default 'main.swf')	   	 *	 main swf file to load (default: "main.swf")	 *	 	 * noCache (default false)	 *	 if 'true' or '1', random string will be appended to swf url 	 *	 to prevent caching	 *	 	 * waitForStartup (default false)	 *	 if 'true' or '1' will cause preloader to pause at 100% 	 *	 and wait for PreloadEvent.STARTUP_COMPLETE.	 *  	 * @author David Knape	 */	public class Preloader extends MovieClip {		protected var progressBar : MovieClip;		protected var loader : Loader;				private var _timeline : Boolean = false;		// these values can be override with flashvars (or URL params)		// or, you can set them in a subclass constructor		protected var swf : String = "main.swf";// default swf		protected var waitForStartup : Boolean = false;		protected var noCache : Boolean = false;
		/**		 * preloader constructor		 * use your own swf and 		 * 		 * @param inPreloader	use your own movieclip for preloader		 */		public function Preloader(inPreloader : MovieClip = null) {			// create preloader container			progressBar = (inPreloader == null) ? new MovieClip() : inPreloader;						if (progressBar.totalFrames >= 2) _timeline = true;						centerProgressBar();			addChild(progressBar);        				// parse params from flashvars        				if(loaderInfo.parameters['swf'] != null) swf = loaderInfo.parameters['swf'];        				// check to see if the boolean vars are true to allow override in subclass			if(noCache || getBoolean('noCache')) swf += "?" + Math.random();			if(waitForStartup || getBoolean('waitForStartup')) waitForStartup = true;      			// setup loader			loader = new Loader(); 				loader.contentLoaderInfo.addEventListener(Event.INIT, onInitHandler);			loader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, _onProgressHandler);           			// add preload event listeners for communication from main swf			//            addEventListener( PreloadEvent.STARTUP_COMPLETE, handleStartupComplete );			//            addEventListener( PreloadEvent.MESSAGE, handlePreloadMessage);            			// wait for stage			addEventListener(Event.ADDED_TO_STAGE, onAddedToStageHandler);            			// load...			loader.load(new URLRequest(swf));		}		/**		 * When swf is finished, add the main content to the stage		 */		protected function onInitHandler( e : Event ) : void {        				// make sure progress bar is at 100%			progressBar.gotoAndStop(progressBar.totalFrames);        	        				if(waitForStartup) {        		        						// show default initialization message				// (use PreloadEvent.MESSAGE events to change this text from main.swf)				// progressBar.setText('Initializing... ');    			    							// add main content to stage to trigger initialization 				// (main app should not add children yet)				addChild(loader.content);			} else {				continueToMainSwf();			}		}		/**		 * visualize the loading progress and center (horizontal/vertical) the progressBar 		 */		private function _onProgressHandler(event : ProgressEvent = null) : void {			onProgressHandler(event);			if(stage != null) centerProgressBar();		}		/**		 * if you use your own progressBar movieclip, override this function		 * and use: new Preloader (foobarMC);		 */				protected function onProgressHandler(event : ProgressEvent = null) : void {						// update the preloader with the loading progress			var _progressBar : Graphics = progressBar.graphics;			_progressBar.clear();			// draw the outline of a progress bar			_progressBar.lineStyle(1, 0xffffff, 1, true);			_progressBar.drawRect(0, 0, 150, 4);			// fill the progress bar based on how many of our bytes have been loaded			var pct : Number = (event == null) ? .5 : event.bytesLoaded / event.bytesTotal;				_progressBar.beginFill(0xffffff);			_progressBar.drawRect(0, 0, 150 * pct, 4);			_progressBar.endFill();		}		/**		 * listen for add to stage events, set defaults		 */		protected function onAddedToStageHandler(event : Event) : void {			// stage resize stuff			stage.scaleMode = StageScaleMode.NO_SCALE;			stage.align = StageAlign.TOP_LEFT;							stage.addEventListener(Event.RESIZE, onStageResize);			onStageResize();		}		/**		 * Center the progress bar		 */		private function onStageResize(event : Event = null) : void {			if(stage != null) centerProgressBar();		}				/**		 * if your movie is not build with the movieclip center at the top left side, 		 * you should override this methode		 */		protected function centerProgressBar() : void {			// position of the progressBar						progressBar.x = Math.round((stage.stageWidth - progressBar.width) / 2);			progressBar.y = Math.round((stage.stageHeight - progressBar.height) / 2);		}		/**		 * Progressbar display was delayed, so it may not be visible.		 * If progress bar was displayed, then wait a fraction of a second 		 * before starting.  This is purely for cosmetic reasons so we don't 		 * see a flicker of a loading bar.		 */		protected function continueToMainSwf() : void {			if(progressBar.visible) {				var timer : Timer = new Timer(250, 1);				timer.addEventListener(TimerEvent.TIMER_COMPLETE, doHidePreloaderAndContinue);				timer.start();			} else {				doHidePreloaderAndContinue();			}		}		/**		 * Finally, let's actually continue on to the main app.		 * If you want a fade out or some transition, this is the method to override		 */		protected function doHidePreloaderAndContinue( e : Event = null) : void {			// kill the progress bar			//progressBar.reset();			progressBar.visible = false;			removeChild(progressBar);			if(!contains(loader.content)) addChild(loader.content);			stage.removeEventListener(Event.RESIZE, onStageResize);		}		/**		 * parse boolean flashvar		 */		protected function getBoolean(param : String) : Boolean {			return loaderInfo.parameters[param] == 'true' || loaderInfo.parameters[param] == '1'; 		}	}}