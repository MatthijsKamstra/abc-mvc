package mvc.core {	import mvc.utils.ClassUtil;	import flash.display.FrameLabel;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.utils.getQualifiedClassName;	import flash.utils.setTimeout;	public class View extends MovieClip {		private var _model : Model;		private var _controller : Controller = null;		private var _viewName : String;		// check if there is a timeline (default no timeline - 1 frame)
		private var _isTimeline : Boolean = false;
		// check the labels: default values are false		private var _labelsNeeded : Object = {show: false, hide: false, onShowFinished: false, onHideFinished: false};
		//		private var _target : MovieClip;
		private var _mouseBlock : Sprite;				// debugging (default no debuggin)
		private static var _isDebugMode : Boolean = false; 		// auto stuff		private var _isAutoRemove : Boolean = false;		private var _isAutoHide : Boolean = false;				// default the buttons are not clickable till animation is finished		private var _isAutoBlock : Boolean = true;		 
		/**		 * constructor		 * 		 * @param inController	specific controller use for this view (default: null)		 */		public function View( inController : Controller = null ) {			// movieclip stuff			visible = false;			name = ClassUtil.typeOf(this);			stop(); // makes sure if it has more frames it stops at the first frame			_target = this;						// Save properties.			_model = Model.getInstance();						// If we have a controller set one.			if( _controller != null ) _controller = inController;						// get viewname (classname)			_viewName = ClassUtil.typeOf(this);						// auto add the view to the Model			_model.viewNameArray = _viewName;						// Register events.			registerEvents();						// wait for stage			if (stage)				initialize(null);			else 				addEventListener(Event.ADDED_TO_STAGE, initialize);		}		private function initialize(e : Event) : void {			removeEventListener(Event.ADDED_TO_STAGE, initialize);						// add blocker			mouseBlocker();						// check if current timeline has the correct labels			if (containsCorrectLabels(this)) {				//trace(">> " + this + " labels are correct");				_target = this;				_isTimeline = true;				stop();			}			// is there an add to this timeline that is an movieclip?			for (var i : uint = 0;i < this.numChildren;i++) {				var _mc : MovieClip = this.getChildAt(i) as MovieClip;				if (_mc && _mc.totalFrames > 1) {					// trace('_mc: ' + (_mc.totalFrames));					if (containsCorrectLabels(_mc)) {						_target = _mc;						_isTimeline = true;						_mc.stop();					}				}			}		}				private function containsCorrectLabels(inMovieclip : MovieClip) : Boolean {			var labels : Array = inMovieclip.currentLabels;			for (var i : uint = 0;i < labels.length;i++) {				var label : FrameLabel = labels[i];				switch(label.name) {					case "show":						//trace("## show");						_labelsNeeded.show = true;						break;					case "hide":						//trace("## hide");						_labelsNeeded.hide = true;						break;					case "onShowFinished":						//trace("## onShowFinished");						_labelsNeeded.onShowFinished = true;						break;					case "onHideFinished":						//trace("## onHideFinished");						_labelsNeeded.onHideFinished = true;						break;				}			}			// let's check if all labels are present			var errorString : String = "";			for (var lb:String in _labelsNeeded) {				if (!_labelsNeeded[lb]) errorString += "\t\tmissing label: " + lb + "\n";			}			if (errorString.length > 0) if (isDebugMode) trace(this + " --->\n" + errorString);						// I recon that you need all labels, so they need all to be there			return (errorString.length == 0);		}		/**		 * automaticly the view is added to the model.		 * If that is not wise (for example with navigation)		 * you should use this function to remove it from the model-list		 */		public function removeFromModel() : void {			_model.removeViewNameFromArray();					}		public function registerEvents() : void {			// Abstract.			model.addEventListener(_viewName, show);			model.addEventListener(( _viewName + Model.CLEAR ), hide);		}		private function onTargetFrameHandler(event : Event) : void {			var value : String = _target.currentLabel;			switch (value) {				case 'show':					//trace('--- show');					// var evt : LocalControllerEvent = new LocalControllerEvent(LocalControllerEvent.ON_SHOW, this);					// dispatchEvent(evt);					break;				case 'onShowFinished':					//trace('--- onShowFinished');					// var evt : LocalControllerEvent = new LocalControllerEvent(LocalControllerEvent.ON_SHOW_FINISHED, this);					// dispatchEvent(evt);					if (isDebugMode) trace(":: " + toString() + " :: onShowFinished");					_target.removeEventListener(Event.ENTER_FRAME, onTargetFrameHandler);					_target.stop();					if (isAutoBlock) _mouseBlock.visible = false; 					break;				case 'hide':					//trace('--- hide');					// var evt : LocalControllerEvent = new LocalControllerEvent(LocalControllerEvent.ON_HIDE, this);					// dispatchEvent(evt);					break;				case 'onHideFinished':					//trace('--- onHideFinished');						// var evt : LocalControllerEvent = new LocalControllerEvent(LocalControllerEvent.ON_HIDE_FINISHED, this);					// dispatchEvent(evt);					if (isDebugMode) trace(":: " + toString() + " :: onHideFinished");					_target.removeEventListener(Event.ENTER_FRAME, onTargetFrameHandler);					_target.stop();					visible = false;					destroy();						if (isAutoBlock) _mouseBlock.visible = false; 					if (isAutoRemove) this.parent.removeChild(this);					break;				default:
					trace("case '" + value + "':\r\ttrace ('--- " + value + "');\r\tbreak;");			}		}		/**		 * show this view		 * default: visibility = true		 */		public function show( event : Event ) : void {			// override this function to use your custom show (tweens/animations)			// override public function show( event : Event ) : void {}			visible = true; // 1 frame movieclips and timeline need to be visible							if (isDebugMode) trace(":: " + toString() + " :: show");						if (isAutoBlock && _isTimeline) {				if (isDebugMode) _mouseBlock.alpha = 0.5;				_mouseBlock.visible = true; 			}								if (_isTimeline) {				_target.gotoAndPlay("show");				_target.addEventListener(Event.ENTER_FRAME, onTargetFrameHandler);			} else {			}		}		/**		 * hide this view		 * default: visibility = false		 */		public function hide( event : Event ) : void {			// override this function to use your custom hide (tweens/animations)			// override public function hide( event : Event ) : void {}			if (isDebugMode) trace(":: " + getQualifiedClassName(this) + " :: hide");					if (isAutoBlock && _isTimeline) {				if (isDebugMode) _mouseBlock.alpha = 0.5;				_mouseBlock.visible = true; 			}			if (_isTimeline) {				_target.gotoAndPlay("hide");				_target.addEventListener(Event.ENTER_FRAME, onTargetFrameHandler);			} else {				// no timeline!!				visible = false;				destroy();			}		}		public function destroy() : void {			setTimeout(nextEvent, 50);		}		private function nextEvent() : void {			_model.sendInternalEvent(_model.currentEvent);		}		// blocker		private function mouseBlocker() : void {			_mouseBlock = new Sprite();			_mouseBlock.graphics.clear();			_mouseBlock.graphics.beginFill(0xff3333, 1);			_mouseBlock.graphics.drawRect(0, 0, this.width, this.height);			_mouseBlock.graphics.endFill();			_mouseBlock.visible = false;			_mouseBlock.alpha = 0;			this.addChild(_mouseBlock);		}				//////////////////////////////////////// getter/setter ////////////////////////////////////////					public function set model( inModel : Model ) : void {			_model = inModel;		}		public function get model() : Model {			return _model;		}		public function set controller( inController : Controller ) : void {			_controller = inController;		}		public function get controller() : Controller {			return _controller;		}		// change debug mode		public static function get isDebugMode() : Boolean {			return _isDebugMode;		}		public static function set isDebugMode(isDebugMode : Boolean) : void {			_isDebugMode = isDebugMode;		}		// change autoRemove mode		public function get isAutoRemove() : Boolean { 			return _isAutoRemove; 		}		public function set isAutoRemove(value : Boolean) : void { 			_isAutoRemove = value; 		}		// auto hide (WERKT NIET)		public function get isAutoHide() : Boolean { 			return _isAutoHide; 		}		public function set isAutoHide(value : Boolean) : void { 			_isAutoHide = value; 		}		// auto block		public function get isAutoBlock() : Boolean { 			return _isAutoBlock; 		}		public function set isAutoBlock(value : Boolean) : void { 			_isAutoBlock = value; 		}				////////////////////////////////////////  ////////////////////////////////////////				public override function toString() : String {			return getQualifiedClassName(this);		}	}}